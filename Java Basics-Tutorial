The main() method:

1. The main() method is required that in every Java program.
2. code inside the main() will be executed.
3. every java program must have a class name that matches the file name, every java program must contain a main() method.

formula:
public class Classname {
public static void main(String[] args) {
//This is your program, and you should type your codes between the parenthesis.
  }
}
________________________________________________________________________________________________________________________________________
Java comments:

There are two types of comments in Java, "//" for single-line comments, "/**/" for multi-line comments.
the better preference may be using "//" for short comments and using "/**/" for long comments.

_________________________________________________________________________________________________________________________________________
Java variables and data types:
there are different types of variables in Java(within primitive type and non-primitive type)
Primitive type:

1. float--4 bytes. It stores numbers with decimal into a variable, surfficient for storing 6-7 decimal digits. for example float z = 114.5141919;
2. char--2 bytes. It stores a character into a variable, character is stored with single quote. for example: char z = 'e';
3. boolean--1 bit(1/8 bytes). It stores only 2 states, true or false.
4. byte--1 byte. It stores whole numbers from -128 to 127, for example byte x = -10;
5. short--2 bytes.It stores whole numbers from -32,768 to 32,767, for example short x = 23333;
6. int--4 bytes.(mostly used one). It stores whole numbers from -2,147,483,648 to 2,147,483,647;
7. double--8 bytes. It stores numbers with decimal into a variable, surfficient for storing 15 decimal digits.

Non-primitive type:
1. String--It stores text into a variable, text is stored with double quote.for example: String x = "This is a text message";
/*This is an exception of all the non-primitive type that is predefined by Java*/
2. Arrays
3. Classes
4. Interface //#2,3 and 4 will be completed once I know their definition and how to use them.
  You can also declare more than one variables at the same time, as long as they are the same type of variable.
for example: int x = 50, y = 60, z = 70

Rules to construct names in variables:
1. Names can contain letters, digits, underscores, and dollarsigns.
2. Names MUST begin with a letter.
3. Names should start with a lowercase letter and it CANNOT contain whitespace.
4. Names are case sensitive.
5. Reserved words such as java keywords cannot be used as names.(in order to prevent conflicts)

_________________________________________________________________________________________________________________________________________
Java Type Casting:

Widening Casting:
byte -> short -> char -> int -> long -> float -> double

Narrowing Casting:
double -> float -> long -> int -> char -> short -> byte

Example of widening csting:
public class Classname{
  public static void main(String[] args){
  int newInt = 10;
  double newDouble = newInt; //Automatic casting, int to double
  
  System.out.println(newInt); //the output should be 10.
  System.out.rintln(newDouble); //the output should be 10.0.
 }
}
--------------------------------------------------------------------------------------------------------------------------------------- 
Example of narrowing casting:
public class Classname{
  public static vod main(String[] args){
  double newDouble = 20.5;
  int newInt = (int)newDouble; //Manual casting, double to int.
  
  System.out.println(newDouble); //the output should be 20.5.
  System.out.println(newInt); //the output should be 20, numbers after the decimal will be forbidden.
  
______________________________________________________________________________________________________________________________________
Java Operators:
Java assigned operators into several different types:
1.Arithmetic Operators
2.Assignment Operators
3.Comperason Operators
4.Logical Operators
5.Bitwise Operators

Arithmetic Operators:
1. + | Addition, used for adding 2 values together, such as 3 + 4.
2. - | Subtraction, used for subtracting one value from another, such as 3 - 4.
3. * | Multiplication, used for multiplying 2 values, such as 3 * 4.
4. / | Division, used for dividing one value from another, such as 3/4.
5. % | Modulus, used for returning the devision remainder, such as 5 % 2(the output will be 1).
6. ++ | Increment, used for increasing 1 value for a variable, such as ++x. 
7. -- | Decrement, used for decreasing 1 value from a variable, such as --x.

Assignment Operators: // I'm going to make the explanation more straight forward since there isn't much explanation in the tutorial.
1. = , x = 5 means x = 5.
2. +=, x += 5 means x = x + 5.
3.-=, x -= 5 means x = x - 5.
4. *=, x *= 5 means x = x * 5.
5. /=, x /= 5 means x = x / 5.
6. %=, x %= 5 means x = x % 5.
7. &=, x &= 5 means x = x & 5.
8. |=, x |= 5 means x = x | 5.
9. ^=, x ^= 5 means x = x ^ 5.// the operator "^" is not an exponentiation operator!!!
10. >>=, x >>= 5 means x = x >> 5.
11. <<=, x <<= 5 means x = x << 5.
/* p.s.: You don't have to memorize all of these when you read it for the first time, try to use them and applicate them later,
feel free to come back and review some of these Operators */

Comparison Operators:
1. ==, it works as "equal to", such as A == B. //That's why you shouldn't use A = B in a comparison, "=" is for assigning an value.
2. !=, it works as "not equal to", 2 values that are not equal will give the output as "true".
3. >, it works as "Greater than", such as A > B.
4. <, it works as "Less than", such as A < B.
5. >=, it works as "Greater or equal to", such as A >= B.
6. <=, it works as "Less or equal to", such as A <= B.

Logical Operators:
1. &&, it works as "and", it returns true if both of the statements are true.
2. ||, it works as "or", it returns true if either one of the statement is true.
3. !, it works as "not", it returns false if the statement is true, otherwise it returns true.

___________________________________________________________________________________________________________________________________________
Java String:
String method can contain a collect of characters(which is a text) with double quotes surrounded.

  To calculate the length(the amount of characters in a text) within the String method, using variable's name.length() in the method can
return the length of it.
for example:

String letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
System.out.println("There are " + letters.length() + " letters."); //The output is: There are 26 letters.

  To enforce the text within the String method to be all upper/lower case, using variable's name.toUpperCase()/toLowerCase() in the method
can return the whole text with all upper/lower case.
for example:

String text = "ThIs Is A tExT mEsSaGe.";
System.out.println(text.toUpperCase()); //The output should be: THIS IS A TEXT MESSAGE.
System.out.println(text.toLowerCase()); //The output should be: this is a text message.

  To find a character or a letter's position in a string, using variable's name.indexOf(" ") /* You should have what you want to find
within the double quotes*/
for example:

String text = "KKSKKIMOSUKIYYUTYAJUSENPAI";
System.out.println(text.indexOf("YYUT"); //the output should be 11, Java starts counting from 0 instead of 1.

To combine 2 strings together, you can either use the "+" operator or using concatenation with concat() method.
example of "+" operator method:
String fname = "Chiri";
String lname = "Sama";
System.out.println(fname + " " + lname); // The output should be: Chiri Sama.

example of concat() method:
String fname = "Chiri "
String lname = "Sama"
System.out.println(fname.concat(lname)); // The output should be: Chiri Sama.

----------------------------------------------------------------------------------------------------------------------------------------
  If using raw double quotes within the text, Java will be misunderstood and generate an error.
for example:
  String text =""There used to have someone quoted:"There used to have someone quoted:"......"""";
  System.out.println(text); /* It will generate an error because Java cannot tell which double quote is for quoting and which double
quote is actually for containing the text into the variable. */

to avoid this problem, using backslash("\") to let Java know the following (one) quote is not for containing the text into the variable.
for example:
  String text="\"There used to have someone quoted:\"There used to have someone quoted:\"......\"\"\"";
  System.out.println(text); // The output should be: "There used to have someone quoted:"There used to have someone quoted:"......""".
 
backslash can work with single-quote(',\'), double-quotes(",\"), and backslash itself(\,\\);
--------------------------------------------------------------------------------------------------------------------------------------------
Additionally, there are 6 escape sequences in Java:
1. \n, it stands for "new line", for example: System.out.println("Hello\nWorld!")
/* The output should be: Hello
                         World! */
2. \r,it stands for "Carriage return", for example: System.out.println("Hello\rWorld!")
/* The output should be: Hello
                         World! (p.s.:I don't think it has any difference comparing to \n at least on the result they return.)*/
3. \t, it stands for "tab", for example: System.out.println("Hello\tWorld!")// The output should be: Hello  World!
4. \b, it stands for "Backspace", for example: System.out.println("Hello\b World!") /*The output should be: Hell World!(I don't think
it is going to be useful) */
5. \f, it stands for "form feed". // I don't think it is available considering it has nothing change based on the result from my compiler.
//Yes, there is no 6th escape sequences in the tutorial :)
-------------------------------------------------------------------------------------------------------------------------------------------
Rules about adding numbers and strings:
Adding numbers uses int as data types, and the result is based on the addition of 2 variables.
int x = 10;
int y = 20;
  System.out.println(x + y); //The output should be 30.
  
Adding strings uses String as data types and with double quotes(") surrounded, the result is based on the connection of 2 variables.
String x = "114";
String y = "514";
  System.out.println(x + y); // The output should be 114514.
  
___________________________________________________________________________________________________________________________________________

Java Math:
Java math is to perform mathematical tasks on numbers.

Math.max(x,y): Math.max is for determining the highest value of x and y
for example:
Math.max(10,114514); // The output should be 114514.

Math.min(x,y): Math.min is for determining the lowest value of x and y.
for example:
Math.min(10,1); // The output should be 1.

Math.sqrt(x): Math.sqrt returns the square root of x for the result.
for example:
Math.sqrt(81); // The output should be 9.

Math.abs(x):Math.abs returns the absolute value of x for the result.
for example:
Math.abs(-114514); // The output should be 114514.

Math.random(): Math.random returns a random number between 0.0(inclusive) and 1.0(exclusive).
if you want a number from 0-100, you may probably use the code below:
int randomNum = (int)(Math.random() * 101);

if you want a random number that its minimum is not 0, you may probably use the code below:
public class MyClass {
  public static void main(String[] args) {
    int max = 104, min = 99; // max and min can be whatever number you like, as long as int can accept it.
    
    int randomNum = (int)(Math.random() * ((max - min)+1) + min); // 99 to 104.
    System.out.println(randomNum);
  }
}
________________________________________________________________________________________________________________________________________
Java Boolean:
Boolean data types only take values true and false.
for example:
boolean correctAnswer = True;
boolean wrongAnswer = False;
System.out.println = (correctAnswer);// The output should be True;
System.out.println = (wrongAnswer); // The output should be False;

Boolean expression:
A boolean expression is a Java expression that returns a boolean value: true or false.
for example:
System.out.println(10 > 9); //The output is true since 10 is greater than 9.
__________________________________________________________________________________________________________________________________________
Java if...else statement:
Java supports these statements below:
1. Less than: a < b.
2. Greater than: A > b.
3. Equal to: A == B.
4. Not equal to: A != B.
5. Greater or equal to: A >= B.
6. Less or equal to: A <= B. 

Java also has the following condition below:
1. if 
2. else
3. else if
4. switch

The syntax of if...else statement:
if (condition){
//this is the block of code will be executed if the condition is true
}
else if (condition){
//this is the block of code will be executed if the "if" condition is false but the else if condition is true
}
else{
//this is the block of code will be executed if both conditions above are false.
}

Short hand if...else statement:
"?" requires the statement after it to check the condition, if the condition is true, the statement will be returned.
":" does not require to check the condition, if the condition is false, the statement after it will be returned.
for example:
//if else statement:
public class Classname{
  public static void main(String []args){
  int age = 18;
  if (age < 18){
  System.out.println("You do not have the access.");
  }
  else{
  System.out.println("You have the access.");
  }
 }
}
}

//Short hand if else statement:
public class Classname{
  public static void main(String []args){
  int age = 18;
  String accessPermission = (age < 18) ?"You do not have the access." :"You have the access";
  System.out.println(accessPermission);
  }
}
____________________________________________________________________________________________________________________________________________
Java switch statement:
Using switch code to execute one of multiple blocks.
for example:
int day = 5;
switch (day){
case 1:
  System.out.println("Monday");
break;
case 2:
  System.out.println("Tuesday");
break;
case 3:
  System.out.println("Wednesday");
break;
case 4:
  System.out.println("Thursday");
break;
case 5:
  System.out.prinln("Friday");
break;
case 6:
  System.out.println("Saturday");
break;
case 7:
  System.out.println("Sunday");
break;
default:
  System.out.println("System error")
}
// The output should be Friday.
--------------------------------------------------------------------------------------------------------------------------------------
"break" keyword:
The break is for stopping the execution of the rest of the code and terminate the whole switch case testing.
That means if there is an available case for the output, break will stop the whole case testing and output the result.

"default" keyword:
The default keyword specified some code to run if there is no case matches.
Note that the default keyword is used at the last statement of the switch block and it doesn't need a "break" keyword.

_____________________________________________________________________________________________________________________________________________
Java while loop:
the loops can execute a block of code until the condition is satisfied.
for example:
int x= 0;
while (x < 5){
System.out.println(x);
x++;
}
do/while loop is a variant of while loop, it execute the block of code once before checking the condition.
for example:
int x = 0;
do{
System.out.println(x);
x++;
}
while(x < 5);

_____________________________________________________________________________________________________________________________________
Java "for" loop:
when you know exactly how many times you want to execute the loop, you can use for loop instead of while loop.
Here is the syntax of for loop:
for(statement 1, statement 2, statement 3){
//code block to be executed.
}

statement 1 will be executed before the execution of the code block.
statement 2 defines the condition for executing the code block.
statement 3 will be executed after the code block is executed.

for example:
for( int i = 10, i < 11, i++){
  System.out.println(i);
  }// The output should be 10.

for-each loop:
for-each loop is exclusively being used to loop the elements in an array.
for example:

String[] gender = {"male", "female", "gay", "lesbian", "transgender", "bisexual"};
for(String i : gender){
System.out.println(i);
} //The output should be: male\r female\r gay\r lesbian\r transgender\r bisexual

___________________________________________________________________________________________________________________________________________

Java break:
instead of using break to jump out of switch statement, it can also be used to jump out of for loop.
for example:
for (int i = 10, i < 20, i++){
if (i == 12){
break;
}
System.out.println(i);
}

Java continue:
continue statement skips the current iteration and move on to the next ieration.
for example:
for (int i = 0, i < 5, i++){
if (i == 4){
continue; // 4 will not be printed out.
}
System.out.println(i);

The use of break and continue are different in while loop:
int i = 0;
while(i < 5){
if (i == 4){
i++;
break; //or continue, depends on which one you want to use.
}
System.out.prinln(i);
}
_______________________________________________________________________________________________________________________________________
Java arrays:
Arrays are used to store multiple values into a single variable, rather than declaring them separatly in different variables.

for example:
String[] names = {"Peter", "John", "York"};
to create an integer, you only need to write a set of numbers:
int[] age = {10 ,20 ,30 ,40};

To access an array of an element, you need to access it by referring its index number.
for example:
String[] names = {"Peter", "John", "York"};
System.out.println(names[0]); // Outputs Peter, 0 is the first in an index.

To change an element in an index, refer to its index number.
for example:
String[] names = {"Peter", "John", "York"};
names[1] = "Kris";
System.out.println(names[1]); //Outputs Kris.

To find out how many elements an array has, use the variable's name.length.
for example:
int[] age = {10 ,20 ,30 ,40};
System.out.println(age.length); //Outputs 4.

To look through an array, you can use for loop:
int[] age = {10 ,20 ,30 ,40};
for (int i = 0, i < age.length, i++){
System.out.println(age[i]); // it basically reads every index in an array and writes the value that was assigned to each index number.
}

You can also do it with for...each method:
int[] age = {10 ,20 ,30 ,40};
for(String i : age){
System.out.println(age[i]);
}

Multidimensional arrays:
A multidimensional array contains one or more arrays.
for example:
int myNumbers[][] = {{1, 2, 3, 4},{5, 6, 7, 8}};
System.out.println(myNumbers[0][3]); //Outputs 7.
______________________________________________________________________________________________________________________________________________





